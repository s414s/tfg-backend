// <auto-generated />
using System;
using System.Text.Json;
using Infrastructure.Persistence.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20241109151505_AddExtraSeedingData")]
    partial class AddExtraSeedingData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.City", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("Domain.Entities.Pallet", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<decimal>("Height")
                        .HasColumnType("numeric");

                    b.Property<long>("ShiftId")
                        .HasColumnType("bigint");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<decimal>("Weight")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("ShiftId");

                    b.ToTable("Pallets");
                });

            modelBuilder.Entity("Domain.Entities.Route", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<double>("AvgSpeed")
                        .HasColumnType("double precision");

                    b.Property<long>("DestinationId")
                        .HasColumnType("bigint");

                    b.Property<double>("Distance")
                        .HasColumnType("double precision");

                    b.Property<long>("OriginId")
                        .HasColumnType("bigint");

                    b.Property<JsonDocument>("Points")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.HasKey("Id");

                    b.HasIndex("DestinationId");

                    b.HasIndex("OriginId");

                    b.ToTable("Routes");
                });

            modelBuilder.Entity("Domain.Entities.RouteShift", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("RouteId")
                        .HasColumnType("bigint");

                    b.Property<long>("ShiftId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RouteId");

                    b.HasIndex("ShiftId");

                    b.ToTable("RouteShifts");
                });

            modelBuilder.Entity("Domain.Entities.Shift", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<long?>("TrailerId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TruckId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TrailerId");

                    b.HasIndex("TruckId");

                    b.ToTable("Shifts");
                });

            modelBuilder.Entity("Domain.Entities.Trailer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<decimal>("Height")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Length")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Width")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.ToTable("Trailers");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Height = 4m,
                            Length = 12m,
                            Width = 2.5m
                        });
                });

            modelBuilder.Entity("Domain.Entities.Truck", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<decimal>("Consumption")
                        .HasColumnType("numeric");

                    b.Property<long>("DriverId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("LastMaintenance")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("ManufacturingDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal>("Mileage")
                        .HasColumnType("numeric");

                    b.Property<string>("Plate")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.HasKey("Id");

                    b.HasAlternateKey("Plate");

                    b.HasIndex("DriverId")
                        .IsUnique();

                    b.ToTable("Trucks");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Consumption = 25m,
                            DriverId = 2L,
                            LastMaintenance = new DateTime(2020, 5, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ManufacturingDate = new DateTime(2020, 5, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Mileage = 100000m,
                            Plate = "4566KLM"
                        },
                        new
                        {
                            Id = 2L,
                            Consumption = 30m,
                            DriverId = 3L,
                            LastMaintenance = new DateTime(2023, 7, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ManufacturingDate = new DateTime(2019, 8, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Mileage = 75000m,
                            Plate = "8923XYZ"
                        },
                        new
                        {
                            Id = 3L,
                            Consumption = 28m,
                            DriverId = 5L,
                            LastMaintenance = new DateTime(2023, 2, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ManufacturingDate = new DateTime(2018, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Mileage = 120000m,
                            Plate = "5634QWE"
                        },
                        new
                        {
                            Id = 4L,
                            Consumption = 26m,
                            DriverId = 1L,
                            LastMaintenance = new DateTime(2024, 4, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ManufacturingDate = new DateTime(2021, 1, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Mileage = 95000m,
                            Plate = "1122ABC"
                        },
                        new
                        {
                            Id = 5L,
                            Consumption = 27m,
                            DriverId = 4L,
                            LastMaintenance = new DateTime(2023, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ManufacturingDate = new DateTime(2019, 11, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Mileage = 80000m,
                            Plate = "7834LMN"
                        });
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("Role")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Email = "alberto@gmail.com",
                            Name = "alberto",
                            Password = "root",
                            Role = 2,
                            Surname = "salas"
                        },
                        new
                        {
                            Id = 2L,
                            Email = "ana@gmail.com",
                            Name = "ana",
                            Password = "root",
                            Role = 1,
                            Surname = "salas"
                        },
                        new
                        {
                            Id = 3L,
                            Email = "maria@gmail.com",
                            Name = "maria",
                            Password = "root",
                            Role = 1,
                            Surname = "hernandez"
                        },
                        new
                        {
                            Id = 4L,
                            Email = "violeta@gmail.com",
                            Name = "violeta",
                            Password = "root",
                            Role = 1,
                            Surname = "salas"
                        },
                        new
                        {
                            Id = 5L,
                            Email = "gimena@gmail.com",
                            Name = "gimena",
                            Password = "root",
                            Role = 1,
                            Surname = "salas"
                        },
                        new
                        {
                            Id = 6L,
                            Email = "sara@gmail.com",
                            Name = "sara",
                            Password = "root",
                            Role = 1,
                            Surname = "salas"
                        });
                });

            modelBuilder.Entity("Domain.Entities.City", b =>
                {
                    b.OwnsOne("Domain.Entities.Common.GeographicCoordinates", "Location", b1 =>
                        {
                            b1.Property<long>("CityId")
                                .HasColumnType("bigint");

                            b1.Property<double>("Lat")
                                .HasColumnType("double precision");

                            b1.Property<double>("Lon")
                                .HasColumnType("double precision");

                            b1.HasKey("CityId");

                            b1.ToTable("Cities");

                            b1.WithOwner()
                                .HasForeignKey("CityId");
                        });

                    b.Navigation("Location")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Pallet", b =>
                {
                    b.HasOne("Domain.Entities.Shift", "Shift")
                        .WithMany("Pallets")
                        .HasForeignKey("ShiftId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Shift");
                });

            modelBuilder.Entity("Domain.Entities.Route", b =>
                {
                    b.HasOne("Domain.Entities.City", "Destination")
                        .WithMany("RouteDestinations")
                        .HasForeignKey("DestinationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.City", "Origin")
                        .WithMany("RouteOrigins")
                        .HasForeignKey("OriginId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Destination");

                    b.Navigation("Origin");
                });

            modelBuilder.Entity("Domain.Entities.RouteShift", b =>
                {
                    b.HasOne("Domain.Entities.Route", "Route")
                        .WithMany("RouteShifts")
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Shift", "Shift")
                        .WithMany("RouteShifts")
                        .HasForeignKey("ShiftId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Route");

                    b.Navigation("Shift");
                });

            modelBuilder.Entity("Domain.Entities.Shift", b =>
                {
                    b.HasOne("Domain.Entities.Trailer", "Trailer")
                        .WithMany("Shifts")
                        .HasForeignKey("TrailerId");

                    b.HasOne("Domain.Entities.Truck", "Truck")
                        .WithMany("Shifts")
                        .HasForeignKey("TruckId");

                    b.Navigation("Trailer");

                    b.Navigation("Truck");
                });

            modelBuilder.Entity("Domain.Entities.Truck", b =>
                {
                    b.HasOne("Domain.Entities.User", "Driver")
                        .WithOne("Truck")
                        .HasForeignKey("Domain.Entities.Truck", "DriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Driver");
                });

            modelBuilder.Entity("Domain.Entities.City", b =>
                {
                    b.Navigation("RouteDestinations");

                    b.Navigation("RouteOrigins");
                });

            modelBuilder.Entity("Domain.Entities.Route", b =>
                {
                    b.Navigation("RouteShifts");
                });

            modelBuilder.Entity("Domain.Entities.Shift", b =>
                {
                    b.Navigation("Pallets");

                    b.Navigation("RouteShifts");
                });

            modelBuilder.Entity("Domain.Entities.Trailer", b =>
                {
                    b.Navigation("Shifts");
                });

            modelBuilder.Entity("Domain.Entities.Truck", b =>
                {
                    b.Navigation("Shifts");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Navigation("Truck");
                });
#pragma warning restore 612, 618
        }
    }
}
